# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    myParam: 'myParam'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            bool $isDebug: '%kernel.debug%' # Теперь везде где у нас есть это свойство оно будет равно этой переменной
            $formLoginAuthenticator: '@security.authenticator.form_login.main'


    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Normalizer/' # Если это закомментировать, то будет использоваться normalizer из этой папки или указать этот сервис ниже
            - '../src/Kernel.php'

#    App\Normalizer\BookNormalizer:
#        class: App\Normalizer\BookNormalizer
#        arguments:
#            $param: '4'

    # если прокидывается интерфейс и его реализуют несколько классов,
    # то надо явно указать di экземляр какого класса нужно прокидывать в конструктор

    App\Services\TestInterface: '@App\Services\Test1'

    App\Services\DymmyClass: '@app.dummy'
    app.dummy:
        class: App\Services\DymmyClass
        calls:
            - setC: [14]
        properties:
            d: 'property d'
        # bind тоже самое что и аргумент, но мощнее, поэтому лучше использовать это
        bind:
            $a: 1
            $b: 'string msg'

    acme_api.event.authentication_failure_listener:
        class: App\EventListener\AuthenticationFailureListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_failure, method: onAuthenticationFailureResponse }
    acme_api.event.jwt_created_listener:
        class: App\EventListener\JWTCreatedListener
        arguments: [ '@request_stack' ]
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }
    acme_api.event.authentication_success_listener:
        class: App\EventListener\AuthenticationSuccessListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccessResponse }
    acme_api.event.jwt_invalid_listener:
        class: App\EventListener\JWTInvalidListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_invalid, method: onJWTInvalid }
    acme_api.event.jwt_notfound_listener:
        class: App\EventListener\JWTNotFoundListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_not_found, method: onJWTNotFound }
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Services\UploadedHelper:
        bind:
            $uploadedPath: '%kernel.project_dir%/public/uploads'
